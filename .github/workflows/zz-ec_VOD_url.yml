name: zz-EC VOD URLs

on:
  workflow_dispatch:
    inputs:
      input_file:
        description: './program/temp/VOD_to_fetch.txt'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    - name: Install yt-dlp
      run: |
        curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp
        chmod a+rx /usr/local/bin/yt-dlp

    - name: Process VOD URLs
      run: |
        set +e  # Disable exit-on-error temporarily
        while IFS=, read -r channel_name group video_url image_url; do
          # Trim leading space from the group variable
          group="${group#" "}"
          # Extract VideoID from video_url
          VIDEO_ID=$(echo "$video_url" | grep -oP 'https://www.youtube.com/watch\?v=\K[^&]+')

          # Retrieve all available formats in a single request
          echo "Retrieving available formats for $video_url..."
          AVAILABLE_FORMATS=$(yt-dlp --list-formats "$video_url" | awk 'NR>1{print $1}')

          # Define the list of video and audio formats to try
          VIDEO_FORMATS="623 617 312 612 311 614 270 606 232 609 231 229 606 605 604 269 602 603"
          AUDIO_FORMATS="234 233"

          # Initialize variables to store the selected formats
          SELECTED_VIDEO_FORMAT=""
          SELECTED_AUDIO_FORMAT=""

          # Select the highest priority video format
          for video_format in $VIDEO_FORMATS; do
            if echo "$AVAILABLE_FORMATS" | grep -qw "$video_format"; then
              SELECTED_VIDEO_FORMAT="$video_format"
              echo "Selected video format: $SELECTED_VIDEO_FORMAT"
              break
            fi
          done

          # Select the highest priority audio format
          for audio_format in $AUDIO_FORMATS; do
            if echo "$AVAILABLE_FORMATS" | grep -qw "$audio_format"; then
              SELECTED_AUDIO_FORMAT="$audio_format"
              echo "Selected audio format: $SELECTED_AUDIO_FORMAT"
              break
            fi
          done

          # Check if both video and audio formats were found
          if [ -n "$SELECTED_VIDEO_FORMAT" ] && [ -n "$SELECTED_AUDIO_FORMAT" ]; then
            # Create directory structure if not exists
            mkdir -p "./vod/$group/$channel_name/videos"

            # Retrieve M3U8 URLs for selected formats
            echo "Retrieving M3U8 URLs for $video_url..."
            M3U8_URL=$(yt-dlp --format "$SELECTED_VIDEO_FORMAT" --get-url --no-playlist "$video_url")
            AUDIO_M3U8_URL=$(yt-dlp --format "$SELECTED_AUDIO_FORMAT" --get-url --no-playlist "$video_url")

            # Write combined M3U8 file
            echo "Writing M3U8 file for $video_url..."
            echo "#EXTM3U" > "./vod/$group/$channel_name/videos/$channel_name_$VIDEO_ID.m3u8"
            echo "#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"mp4\",LANGUAGE=\"eng\",NAME=\"English\",AUTOSELECT=YES,DEFAULT=YES,URI=\"$AUDIO_M3U8_URL\"" >> "./vod/$group/$channel_name/videos/$channel_name_$VIDEO_ID.m3u8"
            echo "#EXT-X-STREAM-INF:NAME=\"FHD\",RESOLUTION=1920x1080,BANDWIDTH=50000000" >> "./vod/$group/$channel_name/videos/$channel_name_$VIDEO_ID.m3u8"
            echo "$M3U8_URL" >> "./vod/$group/$channel_name/videos/$channel_name_$VIDEO_ID.m3u8"
          else
            # Log an error message or handle the case when no valid combination is found
            echo "Error: No valid video and audio formats found for $video_url"
          fi

        done < "./program/temp/VOD_to_fetch.txt"
        set -e  # Enable exit-on-error again

    - name: Commit and Push Changes
      run: |
        git add ./vod
        git commit -m "Update vod files"
        git push
